import torch
import torchxrayvision as xrv
import skimage, torch, torchvision
import sklearn, sklearn.metrics
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import sys

def load_model():
    """Load the pre-trained model"""
    print("Loading DenseNet model trained on multiple chest X-ray datasets...")
    model = xrv.models.DenseNet(weights="densenet121-res224-all")
    return model

def preprocess_image(image_path):
    """Preprocess the image for model input"""
    print(f"Processing image: {image_path}")
    
    # Load and convert to grayscale
    img = skimage.io.imread(image_path)
    if len(img.shape) > 2:
        img = skimage.color.rgb2gray(img)
    
    # Resize and normalize
    img = skimage.transform.resize(img, (224, 224))
    img = xrv.datasets.normalize(img, 255)
    
    # Add channel and batch dimensions
    img = torch.from_numpy(img).unsqueeze(0).unsqueeze(0)
    return img

def analyze_xray(image_path):
    """Analyze X-ray image and return findings"""
    try:
        # Load model
        model = load_model()
        
        # Process image
        img = preprocess_image(image_path)
        
        # Get prediction
        print("Analyzing image...")
        with torch.no_grad():
            preds = model(img)
        
        # Get predictions and pathology names
        pathologies = model.pathologies
        pred_dict = {pathologies[i]: float(preds[0][i]) for i in range(len(pathologies))}
        
        # Sort findings by confidence
        sorted_findings = sorted(pred_dict.items(), key=lambda x: x[1], reverse=True)
        
        # Generate report
        report = "Radiological Analysis Report\n"
        report += "=" * 30 + "\n\n"
        
        report += "Primary Findings:\n"
        report += "-" * 20 + "\n"
        for pathology, confidence in sorted_findings:
            if confidence > 0.5:  # Only show significant findings
                conf_percent = confidence * 100
                report += f"• {pathology}: {conf_percent:.1f}% confidence\n"
        
        report += "\nDetailed Analysis:\n"
        report += "-" * 20 + "\n"
        
        # Add specific recommendations based on findings
        high_confidence_findings = [p for p, c in sorted_findings if c > 0.7]
        
        if high_confidence_findings:
            report += "\nKey Observations:\n"
            for finding in high_confidence_findings:
                report += get_finding_details(finding)
        
        report += "\nRecommended Actions:\n"
        report += "-" * 20 + "\n"
        for finding in high_confidence_findings:
            report += get_recommendations(finding)
        
        report += "\nFollow-up Recommendations:\n"
        report += "-" * 20 + "\n"
        report += get_followup_plan(high_confidence_findings)
        
        report += "\nDisclaimer: This analysis is generated by an AI model and should be "
        report += "verified by a qualified radiologist. Clinical correlation is recommended."
        
        return report
        
    except Exception as e:
        return f"Error analyzing image: {str(e)}"

def get_finding_details(finding):
    """Get detailed description of findings"""
    details = {
        "Enlarged Cardiomediastinum": "• Widening of the mediastinal silhouette suggesting possible "
                                    "mediastinal mass, lymphadenopathy, or vascular abnormality\n",
        "Cardiomegaly": "• Increased cardiac silhouette suggesting possible heart enlargement "
                       "or underlying cardiac condition\n",
        "Lung Opacity": "• Areas of increased opacity in lung fields suggesting possible "
                       "consolidation, infiltrate, or mass\n",
        "Lung Lesion": "• Focal abnormality in lung parenchyma requiring further "
                      "characterization\n",
        "Edema": "• Signs of fluid accumulation in lung tissue suggesting possible "
                "heart failure or fluid overload\n",
        "Consolidation": "• Dense opacity suggesting airspace filling with fluid or cells\n",
        "Pneumonia": "• Inflammatory process in lung tissue with characteristic "
                    "radiographic patterns\n",
        "Atelectasis": "• Area of collapsed or non-aerated lung tissue\n",
        "Pneumothorax": "• Presence of air in pleural space causing lung collapse\n",
        "Pleural Effusion": "• Fluid accumulation in pleural space\n",
        "Pleural Other": "• Other pleural abnormalities noted\n",
        "Fracture": "• Evidence of bone discontinuity\n",
        "Support Devices": "• Presence of medical devices or support equipment\n"
    }
    return details.get(finding, f"• {finding} noted\n")

def get_recommendations(finding):
    """Get recommendations based on findings"""
    recommendations = {
        "Enlarged Cardiomediastinum": "• CT chest with contrast recommended\n"
                                    "• Cardiology consultation advised\n"
                                    "• Consider underlying systemic conditions\n",
        "Cardiomegaly": "• Echocardiogram recommended\n"
                       "• Cardiology consultation\n"
                       "• Monitor blood pressure and fluid status\n",
        "Lung Opacity": "• Consider CT chest for further characterization\n"
                       "• Monitor for changes\n"
                       "• Clinical correlation with symptoms\n",
        "Lung Lesion": "• CT chest with contrast needed\n"
                      "• Consider biopsy if suspicious\n"
                      "• Pulmonology consultation\n",
        "Edema": "• Evaluate cardiac function\n"
                "• Consider diuretic therapy\n"
                "• Monitor fluid status\n",
        "Consolidation": "• Consider antibiotics if bacterial infection suspected\n"
                        "• Follow-up imaging to monitor resolution\n"
                        "• Evaluate for underlying cause\n",
        "Pneumonia": "• Appropriate antibiotic therapy\n"
                    "• Follow-up imaging in 4-6 weeks\n"
                    "• Monitor oxygen saturation\n",
        "Atelectasis": "• Incentive spirometry\n"
                      "• Chest physiotherapy if needed\n"
                      "• Address underlying cause\n",
        "Pneumothorax": "• Consider chest tube if large\n"
                       "• Urgent pulmonology consultation\n"
                       "• Monitor respiratory status\n",
        "Pleural Effusion": "• Consider thoracentesis if large\n"
                           "• Evaluate for underlying cause\n"
                           "• Monitor respiratory status\n",
        "Fracture": "• Orthopedic consultation\n"
                    "• Pain management\n"
                    "• Consider CT for better characterization\n",
        "Support Devices": "• Verify proper positioning\n"
                          "• Regular monitoring of device function\n"
                          "• Document device details\n"
    }
    return recommendations.get(finding, "• Clinical correlation recommended\n")

def get_followup_plan(findings):
    """Generate follow-up plan based on findings"""
    plan = ""
    
    # Determine urgency based on findings
    urgent_conditions = ["Pneumothorax", "Large Pleural Effusion", "Severe Pneumonia"]
    serious_conditions = ["Cardiomegaly", "Lung Lesion", "Consolidation"]
    
    if any(condition in findings for condition in urgent_conditions):
        plan += "• Urgent follow-up within 24-48 hours\n"
        plan += "• Consider hospitalization if clinically indicated\n"
        plan += "• Immediate specialist consultation\n"
    elif any(condition in findings for condition in serious_conditions):
        plan += "• Follow-up within 1 week\n"
        plan += "• Specialist referral as appropriate\n"
        plan += "• Repeat imaging based on clinical course\n"
    else:
        plan += "• Routine follow-up as clinically indicated\n"
        plan += "• Monitor for symptom changes\n"
        plan += "• Follow-up imaging as needed\n"
    
    return plan

def main():
    if len(sys.argv) != 2:
        print("Usage: python xray_diagnosis.py <path_to_xray_image>")
        return
    
    image_path = sys.argv[1]
    if not os.path.exists(image_path):
        print(f"Error: Image file not found: {image_path}")
        return
    
    print("\nAnalyzing X-ray image...")
    report = analyze_xray(image_path)
    print("\n" + report)

if __name__ == "__main__":
    main()
